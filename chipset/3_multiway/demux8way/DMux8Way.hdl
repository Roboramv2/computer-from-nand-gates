/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    Not(in=sel[0], out=notsel0);
    Not(in=sel[1], out=notsel1);
    Not(in=sel[2], out=notsel2);
    And(a=notsel2, b=notsel1, out=i);
    And(a=i, b=notsel0, out=ca);
    And(a=i, b=sel[0], out=cb);
    And(a=notsel2, b=notsel0, out=j);
    And(a=j, b=sel[1], out=cc);
    And(a=sel[0], b=sel[1], out=k);
    And(a=k, b=sel[2], out=ch);   
    And(a=k, b=notsel2, out=cd);
    And(a=notsel0, b=notsel1, out=l);
    And(a=l, b=sel[2], out=ce);
    And(a=sel[2], b=sel[0], out=m);
    And(a=m, b=notsel1, out=cf);
    And(a=sel[2], b=sel[1], out=n);
    And(a=n, b=notsel0, out=cg);
    And(a=in, b=ca, out=a);
    And(a=in, b=cb, out=b);
    And(a=in, b=cc, out=c);
    And(a=in, b=cd, out=d);
    And(a=in, b=ce, out=e);
    And(a=in, b=cf, out=f);
    And(a=in, b=cg, out=g);
    And(a=in, b=ch, out=h);
}